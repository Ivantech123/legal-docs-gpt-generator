name: Deploy API to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build API static files
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          mkdir -p docs/api
          python -c '
          import json
          import os
          from generate_docs import DocumentGenerator
          import yaml

          # Загружаем конфигурацию
          with open("config.yml", "r", encoding="utf-8") as f:
              config = yaml.safe_load(f)

          # Создаем данные для API эндпоинтов
          api_data = {
              "templates": {
                  "path": "api/templates.json",
                  "data": {"templates": [doc["template"] for doc in config["documents"]]}
              },
              "remaining": {
                  "path": "api/remaining.json",
                  "data": {"remaining": 50}
              }
          }

          # Добавляем содержимое каждого шаблона
          for doc in config["documents"]:
              template_name = doc["template"]
              template_path = os.path.join("templates", template_name)
              
              if os.path.exists(template_path):
                  with open(template_path, "r", encoding="utf-8") as f:
                      template_content = f.read()
                  
                  api_data[f"template_{template_name}"] = {
                      "path": f"api/template_{template_name}.json",
                      "data": {
                          "name": template_name,
                          "content": template_content,
                          "variables": doc.get("variables", {})
                      }
                  }

          # Сохраняем данные в JSON файлы
          for endpoint, info in api_data.items():
              with open(f"docs/{info['path']}", "w", encoding="utf-8") as f:
                  json.dump(info["data"], f, ensure_ascii=False, indent=2)
          '

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
